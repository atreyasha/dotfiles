#!/usr/bin/env bash
set -e

# usage function
usage() {
  cat <<EOF
Usage: system-upgrade

This script functions as an extended wrapper around pacman in order
to conduct a full system upgrade. The script updates git submodules
of dotfiles, followed by emacs and pip packages. Finally, this script
upgrades all pacman/aur packages and conducts tests of all important
repositories.

Optional argument:
  -h, --help    Show this help message and exit
EOF
}

find_help() {
  # check for helper flags
  for arg; do
    if [ "$arg" == "--help" ] || [ "$arg" == "-h" ]; then
      usage
      exit 0
    fi
  done
}

printf_log() {
  # declare local variable
  local status="$1"
  local message="$2"
  local bold normal red green
  bold="$(tput bold)"
  normal="$(tput sgr0)"
  red="$(tput setaf 1)"
  green="$(tput setaf 2)"

  # print conditionally
  if [ "$status" = "info" ]; then
    printf "%s\n" "$bold=> $message$normal"
  elif [ "$status" = "success" ]; then
    printf "%s\n" "$bold$green=> $message$normal"
  elif [ "$status" = "failure" ]; then
    printf "%s\n" "$bold$red=> $message$normal"
  fi
}

upgrade_all_pacman() {
  # this will upgrade all pacman packages
  # since we use yay, this also updates foreign packages
  yay -Syu
}

upgrade_all_pip() {
  # upgrade all pip packages
  # source: https://stackoverflow.com/a/3452888
  outdated_pkgs="$(pip list --outdated --format=freeze --user)"
  if [ -n "$outdated_pkgs" ]; then
    # iterate through outdated packages
    # filter and update them using pip
    printf "%s\n" "$outdated_pkgs" | grep -v '^\-e' | cut -d = -f 1 |
      xargs -n1 pip install --user -U

    # update pip package list
    if [ -d "$HOME/monix" ]; then
      pip list --format=freeze --user | tee "$HOME/monix/pkg/requirements.txt"
    fi
  fi
}

update_submodules() {
  # this updates all submodules in the `dotfiles` repo
  if [ -d "$HOME/dotfiles" ]; then
    make -C "$HOME/dotfiles" update
  fi
}

update_spacemacs_pkgs() {
  # prepare spacemacs packages for actual update on the next emacs launch
  # source: https://emacs.stackexchange.com/a/45923
  if [ -f "$HOME/.emacs.d/init.el" ]; then
    emacs --batch -l "$HOME/.emacs.d/init.el" --eval="(configuration-layer/update-packages t)"
  fi
}

test_repository() {
  # declare local variable
  local path="$1"

  # test repository and log results
  if [ -d "$path" ]; then
    if make -C "$path" test; then
      printf_log "success" "$(basename "$path") test successful"
    else
      printf_log "failure" "$(basename "$path") test failure"
    fi
    git -C "$path" status -s 2>/dev/null || true
  fi
}

main() {
  # update dotfile submodules
  printf_log "info" "Updating git submodules"
  update_submodules

  # prepare spacemacs packages for updates
  printf_log "info" "Preparing emacs packages"
  update_spacemacs_pkgs

  # upgrade all pip packages
  printf_log "info" "Upgrading pip packages"
  upgrade_all_pip

  # upgrade all pacman packages
  printf_log "info" "Upgrading pacman/aur packages"
  upgrade_all_pacman

  # test all three repositories
  printf_log "info" "Testing repositories"
  test_repository "$HOME/dotfiles"
  test_repository "$HOME/privates"
  test_repository "$HOME/monix"
}

# overall workflow
find_help "$@"
main
