#!/usr/bin/env bash
set -e

# usage function
usage() {
  cat <<EOF
Usage: system-upgrade [option...]

This script functions as an extended wrapper around pacman in
order to conduct a full system upgrade. This script firstly updates
git submodules of dotfiles. Next, it upgrades emacs, pip packages
and pacman/aur packages; followed by tests of all important
repositories.

Options:
  -h, --help  <flag>  Show this help message and exit
EOF
}

parser() {
  if [[ -n "$1" ]]; then
    case "$1" in
      -h|--help)
        usage
        exit 0
        ;;
      *)
        printf "%s\n" "Unknown option $1"
        exit 1
    esac
  fi
}

logger() {
  # declare local variable
  local status="$1"
  local message="$2"
  local bold normal red green
  bold="$(tput bold)"
  normal="$(tput sgr0)"
  red="$(tput setaf 1)"
  green="$(tput setaf 2)"

  # print conditionally
  if [ "$status" = "info" ]; then
    printf "%s\n" "$bold=> $message$normal"
  elif [ "$status" = "success" ]; then
    printf "%s\n" "$bold$green==> $message$normal"
  elif [ "$status" = "failure" ]; then
    printf "%s\n" "$bold$red==> $message$normal"
  fi
}

upgrade_all_pacman() {
  # this will upgrade all pacman packages
  # since we use yay, this also upgrades foreign packages
  yay -Syu
}

upgrade_all_pip() {
  # upgrade all pip packages
  # source: https://stackoverflow.com/a/3452888
  outdated_pkgs="$(pip --disable-pip-version-check list --outdated --user \
    --format=json | python -c "import json, \
    sys; print('\n'.join([x['name'] for x in json.load(sys.stdin)]))")"
  if [ -n "$outdated_pkgs" ]; then
    # iterate through outdated packages
    printf "%s\n" "$outdated_pkgs" | xargs -n1 pip install \
      --user --break-system-packages -U

    # update pip package list
    if [ -d "$HOME/monix" ]; then
      pip list --format=freeze --user | tee "$HOME/monix/pkg/requirements.txt"
    fi
  fi
}

update_submodules() {
  # this updates all submodules in the `dotfiles` repo
  if [ -d "$HOME/dotfiles" ]; then
    make -C "$HOME/dotfiles" update
  fi
}

upgrade_spacemacs_pkgs() {
  # assign local variable
  local index

  # upgrade spacemacs packages
  # source: https://emacs.stackexchange.com/a/45923
  if [ -f "$HOME/.emacs.d/init.el" ]; then
    # repeat command twice to both prepare and upgrade emacs packages
    for index in $(seq 2); do
      emacs --batch -l "$HOME/.emacs.d/init.el" --eval="(configuration-layer/update-packages t)"
    done
  fi
}

test_repository() {
  # declare local variable
  local path="$1"

  # test repository and log results
  if [ -d "$path" ]; then
    if make -C "$path" test; then
      logger "success" "$(basename "$path") test successful"
    else
      logger "failure" "$(basename "$path") test failure"
    fi
    git -C "$path" status -s 2>/dev/null || true
  fi
}

main() {
  # update dotfile submodules
  logger "info" "Updating git submodules"
  update_submodules

  # upgrade emacs packages
  logger "info" "Upgrading emacs packages"
  upgrade_spacemacs_pkgs

  # upgrade all pip packages
  logger "info" "Upgrading pip packages"
  upgrade_all_pip

  # upgrade all pacman packages
  logger "info" "Upgrading pacman/aur packages"
  upgrade_all_pacman

  # test all three repositories
  logger "info" "Testing repositories"
  test_repository "$HOME/dotfiles"
  test_repository "$HOME/privates"
  test_repository "$HOME/monix"
}

# overall workflow
parser "$@"
main
