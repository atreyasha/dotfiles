#!/usr/bin/env bash
set -e

# usage function
usage() {
  cat <<EOF
Usage: fold_stow [-h|--help] <command> <source> <destination> <dotfile> [dotfile...]

This script searches for stow dotfiles which require forced folding, and then
removes target directories in order to allow for successful folding

To trigger the folding mechanism for a certain stow dotfile directory, simply
add a file called '.fold' on the base directory of the dotfile. Then specify
relative paths to directories which should be folded inside the '.fold' file

Required positional arguments:
  command     <str>   Stow command prefix excluding '-d' and '-t' flags
  source      <str>   Stow source directory excluding '-d' flag
  destination <str>   Stow destination or target directory excluding '-t' flag
  dotfile     <str>   Name of dotfile(s)

Optional argument:
  -h, --help  <flag>  Show this help message and exit
EOF
}

parser() {
  # assign local variable
  local arg

  # check for -h|--help flags
  for arg; do
    if [[ "$arg" =~ ^-h$|^--help$ ]]; then
      usage
      exit 0
    fi
  done

  # check number of arguments
  if [ $# -lt 4 ]; then
    printf "%s\n\n" "Incorrect number of arguments supplied"
    usage
    exit 1
  fi

  # assign positional arguments as global variables
  COMMAND="$1"
  SOURCE="${2//\~/$HOME}"
  DESTINATION="${3//\~/$HOME}"
  DOTFILES="$4"
}

# main function
main() {
  # define local variables
  local dotfile fold
  local dotfiles_nofold=()
  local dotfiles_fold=()

  # loop over files and execute logic
  for dotfile in $DOTFILES; do
    # check for the existence of .fold
    src_dotfile="$SOURCE/$dotfile"
    if [ -f "$src_dotfile/.fold" ]; then
      # loop through all foldable directories
      for fold in $(xargs -a "$src_dotfile/.fold"); do
        src_fold_directory="$src_dotfile/$fold"
        dest_fold_directory="$DESTINATION/$fold"
        # prompt to delete directories if they are not symlinks
        if [[ -d "$src_fold_directory" && -d "$dest_fold_directory" && \
                ! -L "$dest_fold_directory" ]]; then
          read -rp "Delete $dest_fold_directory for folding? (y/N): " ans
          # only delete if answer is y or Y
          if [[ "$ans" == [yY] ]]; then
            rm -rf "$dest_fold_directory"
          fi
        fi
      done
      # append foldable dotfile
      dotfiles_fold+=("$dotfile")
    else
      # otherwise, append non-foldable dotfile
      dotfiles_nofold+=("$dotfile")
    fi
  done

  # execute stow for folding directories
  if ((${#dotfiles_fold[@]})); then
    eval "$COMMAND -d $SOURCE -t $DESTINATION --ignore='^\.fold$' ${dotfiles_fold[*]}"
  fi

  # execute stow for --no-folding directories
  if ((${#dotfiles_nofold[@]})); then
    eval "$COMMAND -d $SOURCE -t $DESTINATION --no-folding ${dotfiles_nofold[*]}"
  fi
}

# overall workflow
parser "$@"
main
